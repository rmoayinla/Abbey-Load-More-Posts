<?php

class Abbey_Ajax_Load_Posts{

	/**
	 * constructor method : this method will be called when the class is instantiated 
	 */
	public function __construct(){

		/**
		 * hook to wordpress ajax action hook
		 * the callable function i.e 2nd parameter is the class method will loading will occur 
		 *@see: load_posts() for the actual loading of posts 
		 */
		add_action( 'wp_ajax_nopriv_abbey_load_more_posts', array( $this, 'load_posts') );
		add_action( 'wp_ajax_abbey_load_more_posts', array( $this, 'load_posts' ) );

		/**
		 * enqueue assets that will be loaded in this plugin 
		 * the asset is just a javascript file that will handle and bind  the Ajax request 
		 */
		add_action ( "wp_enqueue_scripts", array ( $this, "enqueue_script" ) );
	}

	/**
	 * method that load posts through Ajax
	 * this method is hooked to wordpress wp_ajax_nopriv_{action_name} and wp_ajax_{action_name}
	 * actual loading of posts i.e. querying posts with WP_Query is done here 
	 * calls wp_die() or die() function after outputting html 
	 *@since: 0.1 
	 *@uses: WP_Query, locate_template, get_template_part
	 */
	function load_posts(){
		
		/**
		 * check if the action index is not present in the $_POST global variable
		 * this check is to prevent posts from loading when it is not called via an AJAX request
		 * if the check fails, a simple error message is displayed and execution is terminated 
		 */
		if( empty( $_POST[ "action" ] ) || $_POST[ "action" ] !== "abbey_load_more_posts" ){
			$err_message = sprintf( '<div class="ajax-error">%s</div>', 
							esc_html__( "Sorry, these posts can only be loaded through Ajax, kindly enable javascript in your browser, or try a different browser" )
						 );
		}

		/**
		 * check if nonce index is not present in the $_POST global variable
		 * if the nonce is present, another check is made to verify the nonce with wordpress check_ajax_referer
		 * if the nonce check fails, a simple error message is sent and execution is terminated 
		 */
		if( empty( $_POST[ "nonce" ] ) || check_ajax_referer( 'abbey_load_more_posts', $_POST['nonce'], false ) ){
			$err_message = sprintf( '<div class="ajax-error">%s</div>', 
							esc_html__( "Cheating uh ... ??", "abbey-ajax-load-posts" ) 
						);
		}

		if( !empty( $message ) ) wp_die( $message );// this return the function and stop execution //
			
		/**
		 * check if the query_vars index is not set or empty in the $_POST global varible
		 * if this query_vars is not present or empty, a simple error message is displayed and execution is terminated
		 * the query_vars index is important for loading posts, as it contains the arguments passed to WP_Query to load posts
		 */ 
		if( empty( $_POST[ "query_vars" ] ) ){
			echo sprintf( 	'<div class="ajax-error">%s</div>', 
							esc_html__( "Sorry, posts cannot be loaded", "abbey-ajax-load-posts" ) 
					);
			//dont executed anything else and return the function //
			wp_die();
		}

		// extract the query vars from the $_POST global variable //
		$args = $_POST["query_vars"];

		
		/**
		 * setup the paged index, the paged index sets the page's post that will be queried 
		 * if paged is 2, posts in page 2 will only be queried and returned 
		 * the paged index from $_POST is that of the last query, so we increment to load posts of next page 
		 */
		$args[ "paged" ] = (int) $args[ "paged" ]; 
		if( empty( $_POST[ "use_page" ] ) || $_POST[ "use_page" ] == "false"  ) $args[ "paged" ] = $args[ "paged" ] + 1;

		/**
		 * setup the count variable, this just serves as a counter to number posts 
		 * this count is added to class attribute of each post that is generated in the loop i.e .post-panel-3, .post-panel-4
		 * this count is generated by subtracting the paged index by 1 then multiply by the post_per_page index
		 * example: 5 post are displayed per page and we are in page 2, our count will be (2-1)x5 = 5 
		 */
		global $count; 
		$count = ( ( $args[ "paged" ] - 1 ) * (int) $args[ "posts_per_page" ] );

		

		/**
		 * start the query, the args is passed to wordpress WP_Query to load the posts 
		 */
		$more_posts = new WP_Query( $args );
		
		/**
		 * container variable for our generated html 
		 */
		$html = "";

		/** Check if the query returned any post */
		if( $more_posts->have_posts() ) : ?>
		
			<!-- loop through the posts that are returned, this is the starting of the query loop -->
			<?php while( $more_posts->have_posts() ) : $more_posts->the_post(); $count++; //increment the count //?>

				<!-- check if there is a template in the theme, if not the plugin template will be used -->
				<?php if( $template = locate_template( "templates/content-archive.php" ) ) : ?>
					<?php $html .= load_template( $template, false ); ?>
				
				<?php else : ?>
					<!-- use the plugin template, check the partials folder for the file more-post.php -->
					<?php $html .= load_template( ABBEY_LOAD_POSTS_PLUGIN_DIR."partials/more-posts.php", false ); ?>

				<?php endif; //end if $template //?>

			<?php endwhile; //end of loop //?>

			<?php wp_reset_postdata(); //reset back to the main query //?>
							<?php 
			
		endif; 

		echo $html; 

		/**
		 * terminate execution of anything else and return the function
		 * this function is important when you are running an Ajax action in wordpress 
		 */
		wp_die();
	}

	/**
	 * method to enqueue plugin assets i.e. styles and scripts 
	 * this method is hooked to wp_enqueue_scripts 
	 *@see: __construct() for how it is enqueued 
	 */
	public function enqueue_script(){
		
		if( empty( Abbey_Load_Posts_Utilities::query_args() ) )
			return;
		
		wp_enqueue_script( "abbey-ajax-load-posts", ABBEY_LOAD_POSTS_PLUGIN_URL."js/load-posts.js", array( "jquery" ), 1.0, true );

		/**
		 * Some data objects that will be sent to the Javascript file load-posts.js
		 * this Javascript object contains some vars for loadding the next posts e.g. no of post to load, ajax url
		 * a nonce is added to the Javascript object to provide validation when the AJAX request is sent 
		 */
		wp_localize_script( "abbey-ajax-load-posts", "abbeyAjaxLoadPosts", 
			array(
				"ajax_url" => admin_url( "admin-ajax.php" ), 
				"btn_text" => esc_html__( "Load more", "abbey-ajax-load-posts" ), 
				"query_vars" => Abbey_Load_Posts_Utilities::setup_query_args(), 
				"load_posts_nonce" => wp_create_nonce( "abbey_load_more_posts" )
			) 
		);
	}
}